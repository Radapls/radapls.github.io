---
import Logo from '@assets/img/JFR.webp';
import type { BrandType } from 'src/types/variants';

import Birdi from '@assets/img/brands/birdi.webp';
import LocaleSelect from './i18n/LocaleSelect.astro';

import { useTranslations, type Lang } from 'src/i18n';
import { Image } from 'astro:assets';

const t = useTranslations(Astro.currentLocale as Lang);

interface Props {
	variant?: BrandType;
	noLinks?: boolean;
}

const { variant, noLinks = false } = Astro.props;
---

{
	variant === 'radapls' ? (
		<header class="header" id="header">
			<nav class="nav container">
				<a href="/" class="nav__logo" data-astro-reload>
					<Image
						class="MarcaHead"
						src={Logo}
						draggable="false"
						alt="Logo Juan Felipe Rada"
						width={45}
						height={45}
					/>
				</a>

				{!noLinks && (
					<div class="nav__menu" id="nav-menu">
						<ul class="nav__list grid">
							<li class="nav__item">
								<a href="#About" class="nav__link" data-astro-reload>
									<i class="uil uil-user nav__icon" />
									<p>
										{t({
											en: 'About',
											es: 'Acerca',
											'pt-br': 'Acerca',
										})}
									</p>
								</a>
							</li>
							<li class="nav__item">
								<a href="#Skills" class="nav__link" data-astro-reload>
									<i class="uil uil-file-check-alt nav__icon" />
									<p>
										{t({
											en: 'Skills',
											es: 'Habilidades',
											'pt-br': 'Habilidades',
										})}
									</p>
								</a>
							</li>
							<li class="nav__item">
								<a href="#Portfolio" class="nav__link" data-astro-reload>
									<i class="uil uil-scenery nav__icon" />
									<p>
										{t({
											en: 'Portfolio',
											es: 'Portafolio',
											'pt-br': 'Portf√≥lio',
										})}
									</p>
								</a>
							</li>
							<li class="nav__item">
								<a href="#Contact" class="nav__link" data-astro-reload>
									<i class="uil uil-message nav__icon" />
									<p>
										{t({
											en: 'Contact',
											es: 'Contacto',
											'pt-br': 'Contato',
										})}
									</p>
								</a>
							</li>
							<li class="nav__item">
								<a href="/blog" class="nav__link" data-astro-reload>
									<i class="uil uil-newspaper nav__icon" />
									<p>{t('Blog')}</p>
								</a>
							</li>
						</ul>
						<i class="uil uil-times nav__close" id="nav-close" />
					</div>
				)}
				<div class="nav__btns">
					<i class="uil uil-moon change-theme" id="theme-button" />

					{!noLinks && (
						<div class="nav__toggle" id="nav-toggle">
							<i class="uil uil-apps" />
						</div>
					)}
				</div>

				<LocaleSelect />
			</nav>
		</header>
	) : (
		<header class="header" id="header">
			<nav class="nav container">
				<div class="wibx">
					<a href="/">
						<Image
							class="MarcaHead"
							src={Logo}
							draggable="false"
							alt="Logo Juan Felipe Rada"
							width={40}
							height={40}
						/>
					</a>
					<svg xmlns="http://www.w3.org/2000/svg" width="20" height="48" viewBox="0 0 20 48">
						<g>
							<path
								fill="none"
								stroke="rgb(172,185,200)"
								stroke-linecap="square"
								stroke-linejoin="miter"
								stroke-width="1"
								d="M10 2.35231505v50"
							/>
						</g>
					</svg>
					{variant === 'wibx' ? (
						<a href="https://wibx.io/" class="nav__logo">
							<Image
								src="https://assets.coingecko.com/coins/images/11009/large/wibx_new_logo.png"
								draggable="false"
								alt="Wibx Company"
								width={40}
								height={40}
							/>
						</a>
					) : (
						<a href="https://www.birdirx.com/" class="nav__logo">
							<Image src={Birdi} draggable="false" alt="BirdiRx" width={40} height={40} />
						</a>
					)}
				</div>
				<div style="display: flex; align-items: center; justify-content: space-between; gap: 1rem">
					<div class="nav__btns">
						<i class="uil uil-moon change-theme" id="theme-button" />
					</div>

					<LocaleSelect />
				</div>
			</nav>
		</header>
	)
}

<script>
	/*==================== CHANGE BACKGROUND HEADER ====================*/
	function scrollHeader() {
		const nav = (document.getElementById('header') as HTMLElement) || null;
		if (window.scrollY >= 80) nav.classList.add('scroll-header');
		else nav.classList.remove('scroll-header');
	}
	window.addEventListener('scroll', scrollHeader);

	/*==================== DARK LIGHT THEME ====================*/
	const themeButton = document.getElementById('theme-button') as HTMLElement;
	const darkTheme = 'dark-theme';
	const iconTheme = 'uil-sun';

	// Previously selected topic (if user selected)
	const selectedTheme = localStorage.getItem('selected-theme');
	const selectedIcon = localStorage.getItem('selected-icon');

	// We obtain the current theme that the interface has by validating the dark-theme class
	const getCurrentTheme = () => (document.body.classList.contains(darkTheme) ? 'dark' : 'light');
	const getCurrentIcon = () => (themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun');

	// We validate if the user previously chose a topic
	if (selectedTheme) {
		// If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark
		document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme);
		themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](iconTheme);
	}

	// Activate / deactivate the theme manually with the button
	themeButton.addEventListener('click', () => {
		// Add or remove the dark / icon theme
		document.body.classList.toggle(darkTheme);
		themeButton.classList.toggle(iconTheme);
		// We save the theme and the current icon that the user chose
		localStorage.setItem('selected-theme', getCurrentTheme());
		localStorage.setItem('selected-icon', getCurrentIcon());
	});

	/*==================== MENU SHOW Y HIDDEN ====================*/
	const navMenu = document.getElementById('nav-menu') as HTMLElement,
		navToggle = document.getElementById('nav-toggle'),
		navClose = document.getElementById('nav-close');

	/*===== MENU SHOW =====*/
	/* Validate if constant exists */
	if (navToggle) {
		navToggle.addEventListener('click', () => {
			navMenu.classList.add('show-menu');
		});
	}

	/*===== MENU HIDDEN =====*/
	if (navClose) {
		navClose.addEventListener('click', () => {
			navMenu.classList.remove('show-menu');
		});
	}

	/*==================== REMOVE MENU MOBILE ====================*/
	const navLink = document.querySelectorAll('.nav__link');

	function linkAction() {
		const navMenu = document.getElementById('nav-menu') as HTMLElement;
		// When we click on each nav__link, we remove the show-menu class
		navMenu.classList.remove('show-menu');
	}
	navLink.forEach((n) => n.addEventListener('click', linkAction));
</script>

<style>
	.show-menu {
		bottom: 0;
	}

	.active-link {
		color: var(--first-color);
	}

	.wibx {
		display: flex;
		align-items: center;
		gap: 0.25rem;
	}

	.wibx > a {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.wibx > a > .MarcaHead {
		padding: 0;
	}

	.wibx > svg {
		height: 30px;
	}
</style>
